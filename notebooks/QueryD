{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "    <div class=\"bk-root\">\n",
       "        <a href=\"https://bokeh.org\" target=\"_blank\" class=\"bk-logo bk-logo-small bk-logo-notebook\"></a>\n",
       "        <span id=\"1934\">Loading BokehJS ...</span>\n",
       "    </div>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/javascript": [
       "\n",
       "(function(root) {\n",
       "  function now() {\n",
       "    return new Date();\n",
       "  }\n",
       "\n",
       "  var force = true;\n",
       "\n",
       "  if (typeof root._bokeh_onload_callbacks === \"undefined\" || force === true) {\n",
       "    root._bokeh_onload_callbacks = [];\n",
       "    root._bokeh_is_loading = undefined;\n",
       "  }\n",
       "\n",
       "  var JS_MIME_TYPE = 'application/javascript';\n",
       "  var HTML_MIME_TYPE = 'text/html';\n",
       "  var EXEC_MIME_TYPE = 'application/vnd.bokehjs_exec.v0+json';\n",
       "  var CLASS_NAME = 'output_bokeh rendered_html';\n",
       "\n",
       "  /**\n",
       "   * Render data to the DOM node\n",
       "   */\n",
       "  function render(props, node) {\n",
       "    var script = document.createElement(\"script\");\n",
       "    node.appendChild(script);\n",
       "  }\n",
       "\n",
       "  /**\n",
       "   * Handle when an output is cleared or removed\n",
       "   */\n",
       "  function handleClearOutput(event, handle) {\n",
       "    var cell = handle.cell;\n",
       "\n",
       "    var id = cell.output_area._bokeh_element_id;\n",
       "    var server_id = cell.output_area._bokeh_server_id;\n",
       "    // Clean up Bokeh references\n",
       "    if (id != null && id in Bokeh.index) {\n",
       "      Bokeh.index[id].model.document.clear();\n",
       "      delete Bokeh.index[id];\n",
       "    }\n",
       "\n",
       "    if (server_id !== undefined) {\n",
       "      // Clean up Bokeh references\n",
       "      var cmd = \"from bokeh.io.state import curstate; print(curstate().uuid_to_server['\" + server_id + \"'].get_sessions()[0].document.roots[0]._id)\";\n",
       "      cell.notebook.kernel.execute(cmd, {\n",
       "        iopub: {\n",
       "          output: function(msg) {\n",
       "            var id = msg.content.text.trim();\n",
       "            if (id in Bokeh.index) {\n",
       "              Bokeh.index[id].model.document.clear();\n",
       "              delete Bokeh.index[id];\n",
       "            }\n",
       "          }\n",
       "        }\n",
       "      });\n",
       "      // Destroy server and session\n",
       "      var cmd = \"import bokeh.io.notebook as ion; ion.destroy_server('\" + server_id + \"')\";\n",
       "      cell.notebook.kernel.execute(cmd);\n",
       "    }\n",
       "  }\n",
       "\n",
       "  /**\n",
       "   * Handle when a new output is added\n",
       "   */\n",
       "  function handleAddOutput(event, handle) {\n",
       "    var output_area = handle.output_area;\n",
       "    var output = handle.output;\n",
       "\n",
       "    // limit handleAddOutput to display_data with EXEC_MIME_TYPE content only\n",
       "    if ((output.output_type != \"display_data\") || (!output.data.hasOwnProperty(EXEC_MIME_TYPE))) {\n",
       "      return\n",
       "    }\n",
       "\n",
       "    var toinsert = output_area.element.find(\".\" + CLASS_NAME.split(' ')[0]);\n",
       "\n",
       "    if (output.metadata[EXEC_MIME_TYPE][\"id\"] !== undefined) {\n",
       "      toinsert[toinsert.length - 1].firstChild.textContent = output.data[JS_MIME_TYPE];\n",
       "      // store reference to embed id on output_area\n",
       "      output_area._bokeh_element_id = output.metadata[EXEC_MIME_TYPE][\"id\"];\n",
       "    }\n",
       "    if (output.metadata[EXEC_MIME_TYPE][\"server_id\"] !== undefined) {\n",
       "      var bk_div = document.createElement(\"div\");\n",
       "      bk_div.innerHTML = output.data[HTML_MIME_TYPE];\n",
       "      var script_attrs = bk_div.children[0].attributes;\n",
       "      for (var i = 0; i < script_attrs.length; i++) {\n",
       "        toinsert[toinsert.length - 1].firstChild.setAttribute(script_attrs[i].name, script_attrs[i].value);\n",
       "      }\n",
       "      // store reference to server id on output_area\n",
       "      output_area._bokeh_server_id = output.metadata[EXEC_MIME_TYPE][\"server_id\"];\n",
       "    }\n",
       "  }\n",
       "\n",
       "  function register_renderer(events, OutputArea) {\n",
       "\n",
       "    function append_mime(data, metadata, element) {\n",
       "      // create a DOM node to render to\n",
       "      var toinsert = this.create_output_subarea(\n",
       "        metadata,\n",
       "        CLASS_NAME,\n",
       "        EXEC_MIME_TYPE\n",
       "      );\n",
       "      this.keyboard_manager.register_events(toinsert);\n",
       "      // Render to node\n",
       "      var props = {data: data, metadata: metadata[EXEC_MIME_TYPE]};\n",
       "      render(props, toinsert[toinsert.length - 1]);\n",
       "      element.append(toinsert);\n",
       "      return toinsert\n",
       "    }\n",
       "\n",
       "    /* Handle when an output is cleared or removed */\n",
       "    events.on('clear_output.CodeCell', handleClearOutput);\n",
       "    events.on('delete.Cell', handleClearOutput);\n",
       "\n",
       "    /* Handle when a new output is added */\n",
       "    events.on('output_added.OutputArea', handleAddOutput);\n",
       "\n",
       "    /**\n",
       "     * Register the mime type and append_mime function with output_area\n",
       "     */\n",
       "    OutputArea.prototype.register_mime_type(EXEC_MIME_TYPE, append_mime, {\n",
       "      /* Is output safe? */\n",
       "      safe: true,\n",
       "      /* Index of renderer in `output_area.display_order` */\n",
       "      index: 0\n",
       "    });\n",
       "  }\n",
       "\n",
       "  // register the mime type if in Jupyter Notebook environment and previously unregistered\n",
       "  if (root.Jupyter !== undefined) {\n",
       "    var events = require('base/js/events');\n",
       "    var OutputArea = require('notebook/js/outputarea').OutputArea;\n",
       "\n",
       "    if (OutputArea.prototype.mime_types().indexOf(EXEC_MIME_TYPE) == -1) {\n",
       "      register_renderer(events, OutputArea);\n",
       "    }\n",
       "  }\n",
       "\n",
       "  \n",
       "  if (typeof (root._bokeh_timeout) === \"undefined\" || force === true) {\n",
       "    root._bokeh_timeout = Date.now() + 5000;\n",
       "    root._bokeh_failed_load = false;\n",
       "  }\n",
       "\n",
       "  var NB_LOAD_WARNING = {'data': {'text/html':\n",
       "     \"<div style='background-color: #fdd'>\\n\"+\n",
       "     \"<p>\\n\"+\n",
       "     \"BokehJS does not appear to have successfully loaded. If loading BokehJS from CDN, this \\n\"+\n",
       "     \"may be due to a slow or bad network connection. Possible fixes:\\n\"+\n",
       "     \"</p>\\n\"+\n",
       "     \"<ul>\\n\"+\n",
       "     \"<li>re-rerun `output_notebook()` to attempt to load from CDN again, or</li>\\n\"+\n",
       "     \"<li>use INLINE resources instead, as so:</li>\\n\"+\n",
       "     \"</ul>\\n\"+\n",
       "     \"<code>\\n\"+\n",
       "     \"from bokeh.resources import INLINE\\n\"+\n",
       "     \"output_notebook(resources=INLINE)\\n\"+\n",
       "     \"</code>\\n\"+\n",
       "     \"</div>\"}};\n",
       "\n",
       "  function display_loaded() {\n",
       "    var el = document.getElementById(\"1934\");\n",
       "    if (el != null) {\n",
       "      el.textContent = \"BokehJS is loading...\";\n",
       "    }\n",
       "    if (root.Bokeh !== undefined) {\n",
       "      if (el != null) {\n",
       "        el.textContent = \"BokehJS \" + root.Bokeh.version + \" successfully loaded.\";\n",
       "      }\n",
       "    } else if (Date.now() < root._bokeh_timeout) {\n",
       "      setTimeout(display_loaded, 100)\n",
       "    }\n",
       "  }\n",
       "\n",
       "\n",
       "  function run_callbacks() {\n",
       "    try {\n",
       "      root._bokeh_onload_callbacks.forEach(function(callback) {\n",
       "        if (callback != null)\n",
       "          callback();\n",
       "      });\n",
       "    } finally {\n",
       "      delete root._bokeh_onload_callbacks\n",
       "    }\n",
       "    console.debug(\"Bokeh: all callbacks have finished\");\n",
       "  }\n",
       "\n",
       "  function load_libs(css_urls, js_urls, callback) {\n",
       "    if (css_urls == null) css_urls = [];\n",
       "    if (js_urls == null) js_urls = [];\n",
       "\n",
       "    root._bokeh_onload_callbacks.push(callback);\n",
       "    if (root._bokeh_is_loading > 0) {\n",
       "      console.debug(\"Bokeh: BokehJS is being loaded, scheduling callback at\", now());\n",
       "      return null;\n",
       "    }\n",
       "    if (js_urls == null || js_urls.length === 0) {\n",
       "      run_callbacks();\n",
       "      return null;\n",
       "    }\n",
       "    console.debug(\"Bokeh: BokehJS not loaded, scheduling load and callback at\", now());\n",
       "    root._bokeh_is_loading = css_urls.length + js_urls.length;\n",
       "\n",
       "    function on_load() {\n",
       "      root._bokeh_is_loading--;\n",
       "      if (root._bokeh_is_loading === 0) {\n",
       "        console.debug(\"Bokeh: all BokehJS libraries/stylesheets loaded\");\n",
       "        run_callbacks()\n",
       "      }\n",
       "    }\n",
       "\n",
       "    function on_error() {\n",
       "      console.error(\"failed to load \" + url);\n",
       "    }\n",
       "\n",
       "    for (var i = 0; i < css_urls.length; i++) {\n",
       "      var url = css_urls[i];\n",
       "      const element = document.createElement(\"link\");\n",
       "      element.onload = on_load;\n",
       "      element.onerror = on_error;\n",
       "      element.rel = \"stylesheet\";\n",
       "      element.type = \"text/css\";\n",
       "      element.href = url;\n",
       "      console.debug(\"Bokeh: injecting link tag for BokehJS stylesheet: \", url);\n",
       "      document.body.appendChild(element);\n",
       "    }\n",
       "\n",
       "    for (var i = 0; i < js_urls.length; i++) {\n",
       "      var url = js_urls[i];\n",
       "      var element = document.createElement('script');\n",
       "      element.onload = on_load;\n",
       "      element.onerror = on_error;\n",
       "      element.async = false;\n",
       "      element.src = url;\n",
       "      console.debug(\"Bokeh: injecting script tag for BokehJS library: \", url);\n",
       "      document.head.appendChild(element);\n",
       "    }\n",
       "  };var element = document.getElementById(\"1934\");\n",
       "  if (element == null) {\n",
       "    console.error(\"Bokeh: ERROR: autoload.js configured with elementid '1934' but no matching script tag was found. \")\n",
       "    return false;\n",
       "  }\n",
       "\n",
       "  function inject_raw_css(css) {\n",
       "    const element = document.createElement(\"style\");\n",
       "    element.appendChild(document.createTextNode(css));\n",
       "    document.body.appendChild(element);\n",
       "  }\n",
       "\n",
       "  \n",
       "  var js_urls = [\"https://cdn.pydata.org/bokeh/release/bokeh-1.4.0.min.js\", \"https://cdn.pydata.org/bokeh/release/bokeh-widgets-1.4.0.min.js\", \"https://cdn.pydata.org/bokeh/release/bokeh-tables-1.4.0.min.js\", \"https://cdn.pydata.org/bokeh/release/bokeh-gl-1.4.0.min.js\"];\n",
       "  var css_urls = [];\n",
       "  \n",
       "\n",
       "  var inline_js = [\n",
       "    function(Bokeh) {\n",
       "      Bokeh.set_log_level(\"info\");\n",
       "    },\n",
       "    function(Bokeh) {\n",
       "    \n",
       "    \n",
       "    }\n",
       "  ];\n",
       "\n",
       "  function run_inline_js() {\n",
       "    \n",
       "    if (root.Bokeh !== undefined || force === true) {\n",
       "      \n",
       "    for (var i = 0; i < inline_js.length; i++) {\n",
       "      inline_js[i].call(root, root.Bokeh);\n",
       "    }\n",
       "    if (force === true) {\n",
       "        display_loaded();\n",
       "      }} else if (Date.now() < root._bokeh_timeout) {\n",
       "      setTimeout(run_inline_js, 100);\n",
       "    } else if (!root._bokeh_failed_load) {\n",
       "      console.log(\"Bokeh: BokehJS failed to load within specified timeout.\");\n",
       "      root._bokeh_failed_load = true;\n",
       "    } else if (force !== true) {\n",
       "      var cell = $(document.getElementById(\"1934\")).parents('.cell').data().cell;\n",
       "      cell.output_area.append_execute_result(NB_LOAD_WARNING)\n",
       "    }\n",
       "\n",
       "  }\n",
       "\n",
       "  if (root._bokeh_is_loading === 0) {\n",
       "    console.debug(\"Bokeh: BokehJS loaded, going straight to plotting\");\n",
       "    run_inline_js();\n",
       "  } else {\n",
       "    load_libs(css_urls, js_urls, function() {\n",
       "      console.debug(\"Bokeh: BokehJS plotting callback run at\", now());\n",
       "      run_inline_js();\n",
       "    });\n",
       "  }\n",
       "}(window));"
      ],
      "application/vnd.bokehjs_load.v0+json": "\n(function(root) {\n  function now() {\n    return new Date();\n  }\n\n  var force = true;\n\n  if (typeof root._bokeh_onload_callbacks === \"undefined\" || force === true) {\n    root._bokeh_onload_callbacks = [];\n    root._bokeh_is_loading = undefined;\n  }\n\n  \n\n  \n  if (typeof (root._bokeh_timeout) === \"undefined\" || force === true) {\n    root._bokeh_timeout = Date.now() + 5000;\n    root._bokeh_failed_load = false;\n  }\n\n  var NB_LOAD_WARNING = {'data': {'text/html':\n     \"<div style='background-color: #fdd'>\\n\"+\n     \"<p>\\n\"+\n     \"BokehJS does not appear to have successfully loaded. If loading BokehJS from CDN, this \\n\"+\n     \"may be due to a slow or bad network connection. Possible fixes:\\n\"+\n     \"</p>\\n\"+\n     \"<ul>\\n\"+\n     \"<li>re-rerun `output_notebook()` to attempt to load from CDN again, or</li>\\n\"+\n     \"<li>use INLINE resources instead, as so:</li>\\n\"+\n     \"</ul>\\n\"+\n     \"<code>\\n\"+\n     \"from bokeh.resources import INLINE\\n\"+\n     \"output_notebook(resources=INLINE)\\n\"+\n     \"</code>\\n\"+\n     \"</div>\"}};\n\n  function display_loaded() {\n    var el = document.getElementById(\"1934\");\n    if (el != null) {\n      el.textContent = \"BokehJS is loading...\";\n    }\n    if (root.Bokeh !== undefined) {\n      if (el != null) {\n        el.textContent = \"BokehJS \" + root.Bokeh.version + \" successfully loaded.\";\n      }\n    } else if (Date.now() < root._bokeh_timeout) {\n      setTimeout(display_loaded, 100)\n    }\n  }\n\n\n  function run_callbacks() {\n    try {\n      root._bokeh_onload_callbacks.forEach(function(callback) {\n        if (callback != null)\n          callback();\n      });\n    } finally {\n      delete root._bokeh_onload_callbacks\n    }\n    console.debug(\"Bokeh: all callbacks have finished\");\n  }\n\n  function load_libs(css_urls, js_urls, callback) {\n    if (css_urls == null) css_urls = [];\n    if (js_urls == null) js_urls = [];\n\n    root._bokeh_onload_callbacks.push(callback);\n    if (root._bokeh_is_loading > 0) {\n      console.debug(\"Bokeh: BokehJS is being loaded, scheduling callback at\", now());\n      return null;\n    }\n    if (js_urls == null || js_urls.length === 0) {\n      run_callbacks();\n      return null;\n    }\n    console.debug(\"Bokeh: BokehJS not loaded, scheduling load and callback at\", now());\n    root._bokeh_is_loading = css_urls.length + js_urls.length;\n\n    function on_load() {\n      root._bokeh_is_loading--;\n      if (root._bokeh_is_loading === 0) {\n        console.debug(\"Bokeh: all BokehJS libraries/stylesheets loaded\");\n        run_callbacks()\n      }\n    }\n\n    function on_error() {\n      console.error(\"failed to load \" + url);\n    }\n\n    for (var i = 0; i < css_urls.length; i++) {\n      var url = css_urls[i];\n      const element = document.createElement(\"link\");\n      element.onload = on_load;\n      element.onerror = on_error;\n      element.rel = \"stylesheet\";\n      element.type = \"text/css\";\n      element.href = url;\n      console.debug(\"Bokeh: injecting link tag for BokehJS stylesheet: \", url);\n      document.body.appendChild(element);\n    }\n\n    for (var i = 0; i < js_urls.length; i++) {\n      var url = js_urls[i];\n      var element = document.createElement('script');\n      element.onload = on_load;\n      element.onerror = on_error;\n      element.async = false;\n      element.src = url;\n      console.debug(\"Bokeh: injecting script tag for BokehJS library: \", url);\n      document.head.appendChild(element);\n    }\n  };var element = document.getElementById(\"1934\");\n  if (element == null) {\n    console.error(\"Bokeh: ERROR: autoload.js configured with elementid '1934' but no matching script tag was found. \")\n    return false;\n  }\n\n  function inject_raw_css(css) {\n    const element = document.createElement(\"style\");\n    element.appendChild(document.createTextNode(css));\n    document.body.appendChild(element);\n  }\n\n  \n  var js_urls = [\"https://cdn.pydata.org/bokeh/release/bokeh-1.4.0.min.js\", \"https://cdn.pydata.org/bokeh/release/bokeh-widgets-1.4.0.min.js\", \"https://cdn.pydata.org/bokeh/release/bokeh-tables-1.4.0.min.js\", \"https://cdn.pydata.org/bokeh/release/bokeh-gl-1.4.0.min.js\"];\n  var css_urls = [];\n  \n\n  var inline_js = [\n    function(Bokeh) {\n      Bokeh.set_log_level(\"info\");\n    },\n    function(Bokeh) {\n    \n    \n    }\n  ];\n\n  function run_inline_js() {\n    \n    if (root.Bokeh !== undefined || force === true) {\n      \n    for (var i = 0; i < inline_js.length; i++) {\n      inline_js[i].call(root, root.Bokeh);\n    }\n    if (force === true) {\n        display_loaded();\n      }} else if (Date.now() < root._bokeh_timeout) {\n      setTimeout(run_inline_js, 100);\n    } else if (!root._bokeh_failed_load) {\n      console.log(\"Bokeh: BokehJS failed to load within specified timeout.\");\n      root._bokeh_failed_load = true;\n    } else if (force !== true) {\n      var cell = $(document.getElementById(\"1934\")).parents('.cell').data().cell;\n      cell.output_area.append_execute_result(NB_LOAD_WARNING)\n    }\n\n  }\n\n  if (root._bokeh_is_loading === 0) {\n    console.debug(\"Bokeh: BokehJS loaded, going straight to plotting\");\n    run_inline_js();\n  } else {\n    load_libs(css_urls, js_urls, function() {\n      console.debug(\"Bokeh: BokehJS plotting callback run at\", now());\n      run_inline_js();\n    });\n  }\n}(window));"
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "from scipy import signal\n",
    "\n",
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.model_selection import TimeSeriesSplit\n",
    "\n",
    "from statsmodels.tsa import arima_model\n",
    "import statsmodels.api as sm\n",
    "\n",
    "from bokeh.plotting import figure, output_notebook, show, reset_output, output_file\n",
    "from bokeh.colors import RGB\n",
    "from bokeh.models import ColumnDataSource, Slider, CustomJS, ColorBar, DateSlider\n",
    "from bokeh.io import curdoc\n",
    "from bokeh.layouts import widgetbox, column, gridplot\n",
    "from bokeh.transform import linear_cmap\n",
    "from bokeh.palettes import Spectral10, RdYlGn10\n",
    "\n",
    "output_notebook()\n",
    "\n",
    "import pickle\n",
    "import os\n",
    "\n",
    "c = sns.color_palette(\"colorblind\")\n",
    "\n",
    "from pyspark.sql import functions\n",
    "from pyspark import SparkContext\n",
    "from pyspark.sql import SQLContext\n",
    "\n",
    "from cassandra.cluster import Cluster\n",
    "\n",
    "import itertools"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Query description"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* This Cassandra table stores the **mean tone** and the **number of articles** for each **country pair** present in GDELT GKG relation for each day of the year **2019**. The aim of this notebook is to exhibit some results from this table."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 1. Connection to spark"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "os.environ['PYSPARK_SUBMIT_ARGS'] = '''--packages com.datastax.spark:spark-cassandra-connector_2.11:2.3.0 \n",
    "                                       --conf spark.cassandra.connection.host=172.31.83.154,172.31.81.83 pyspark-shell'''"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "sc = SparkContext(\"local\", \"GDELT\")\n",
    "sqlContext = SQLContext(sc)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "def load_and_get_table_df(keys_space_name, table_name):\n",
    "    table_df = sqlContext.read\\\n",
    "        .format(\"org.apache.spark.sql.cassandra\")\\\n",
    "        .options(table=table_name, keyspace=keys_space_name)\\\n",
    "        .load()\n",
    "    return table_df\n",
    "\n",
    "queryd = load_and_get_table_df('gdelt', 'queryd2')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "14809165"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "queryd.count()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* Selection of all rows in Cassandra"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "cluster = Cluster(['172.31.83.154'])  # provide contact points and port\n",
    "session = cluster.connect('gdelt')\n",
    "rows = session.execute('select * from queryd')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 2. Month aggregation "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "data_month = queryd.groupby(\"country1\", \"country2\", \"month\").agg(functions.mean(\"mean_tone\").alias(\"mean_tone\"),\\\n",
    "                                                            functions.sum(\"n_articles\").alias(\"n_articles\"))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_month = data_month.toPandas()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>country1</th>\n",
       "      <th>country2</th>\n",
       "      <th>month</th>\n",
       "      <th>mean_tone</th>\n",
       "      <th>n_articles</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>708111</th>\n",
       "      <td>American</td>\n",
       "      <td>United States</td>\n",
       "      <td>5</td>\n",
       "      <td>-1.401431</td>\n",
       "      <td>433170</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>521186</th>\n",
       "      <td>American</td>\n",
       "      <td>United States</td>\n",
       "      <td>6</td>\n",
       "      <td>-1.419249</td>\n",
       "      <td>400265</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>464398</th>\n",
       "      <td>American</td>\n",
       "      <td>United States</td>\n",
       "      <td>4</td>\n",
       "      <td>-1.399124</td>\n",
       "      <td>398140</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>801986</th>\n",
       "      <td>American</td>\n",
       "      <td>United States</td>\n",
       "      <td>2</td>\n",
       "      <td>-1.233848</td>\n",
       "      <td>393248</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>586394</th>\n",
       "      <td>American</td>\n",
       "      <td>United States</td>\n",
       "      <td>3</td>\n",
       "      <td>-1.265355</td>\n",
       "      <td>383891</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>672838</th>\n",
       "      <td>French Republic</td>\n",
       "      <td>Republic Of Tunisia</td>\n",
       "      <td>3</td>\n",
       "      <td>1.446773</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>209704</th>\n",
       "      <td>Barbadian</td>\n",
       "      <td>New Zealander</td>\n",
       "      <td>4</td>\n",
       "      <td>2.597253</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>209707</th>\n",
       "      <td>Republic Of Ireland</td>\n",
       "      <td>Venezuelans</td>\n",
       "      <td>2</td>\n",
       "      <td>-2.222222</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>475740</th>\n",
       "      <td>Reunion</td>\n",
       "      <td>Singaporeans</td>\n",
       "      <td>2</td>\n",
       "      <td>4.231228</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>283452</th>\n",
       "      <td>Republic Of Mozambique</td>\n",
       "      <td>Sierra Leone</td>\n",
       "      <td>5</td>\n",
       "      <td>2.183014</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>813541 rows × 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                      country1             country2  month  mean_tone  \\\n",
       "708111                American        United States      5  -1.401431   \n",
       "521186                American        United States      6  -1.419249   \n",
       "464398                American        United States      4  -1.399124   \n",
       "801986                American        United States      2  -1.233848   \n",
       "586394                American        United States      3  -1.265355   \n",
       "...                        ...                  ...    ...        ...   \n",
       "672838         French Republic  Republic Of Tunisia      3   1.446773   \n",
       "209704               Barbadian        New Zealander      4   2.597253   \n",
       "209707     Republic Of Ireland          Venezuelans      2  -2.222222   \n",
       "475740                 Reunion         Singaporeans      2   4.231228   \n",
       "283452  Republic Of Mozambique         Sierra Leone      5   2.183014   \n",
       "\n",
       "        n_articles  \n",
       "708111      433170  \n",
       "521186      400265  \n",
       "464398      398140  \n",
       "801986      393248  \n",
       "586394      383891  \n",
       "...            ...  \n",
       "672838           1  \n",
       "209704           1  \n",
       "209707           1  \n",
       "475740           1  \n",
       "283452           1  \n",
       "\n",
       "[813541 rows x 5 columns]"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_month.sort_values(by='n_articles', ascending=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 3. Data cleaning "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* Some country in the data extracted from GKG table contains different disignation. For instance, USA are named as American or Americans...\n",
    "* We remove some of this redundancy bellow"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "data = df_month[( ((df_month.country1 + df_month.country2) != \"AmericanAmericans\") ) &\n",
    "               \n",
    "               ( ((df_month.country1 + df_month.country2) != \"AmericaUnited States\") ) &\n",
    "                \n",
    "               ( ((df_month.country1 + df_month.country2) != \"AmericanUnited States\") ) &\n",
    "                \n",
    "               ( ((df_month.country1 + df_month.country2) != \"AmericansUnited States\") ) &\n",
    "                \n",
    "               ( ((df_month.country1 + df_month.country2) != \"AmericaAmericans\") ) &\n",
    "                \n",
    "                ( ((df_month.country1 + df_month.country2) != \"AmericaAmerican\") ) &\n",
    "                \n",
    "               ( ((df_month.country1 + df_month.country2) != \"ChinaChinese\") )\n",
    "                \n",
    "               ].sort_values(by='n_articles', ascending=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>country1</th>\n",
       "      <th>country2</th>\n",
       "      <th>month</th>\n",
       "      <th>mean_tone</th>\n",
       "      <th>n_articles</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1199995</th>\n",
       "      <td>China</td>\n",
       "      <td>United States</td>\n",
       "      <td>1</td>\n",
       "      <td>-1.425263</td>\n",
       "      <td>164128</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1549057</th>\n",
       "      <td>Canada</td>\n",
       "      <td>United States</td>\n",
       "      <td>1</td>\n",
       "      <td>-0.964342</td>\n",
       "      <td>140018</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1022398</th>\n",
       "      <td>Russia</td>\n",
       "      <td>United States</td>\n",
       "      <td>1</td>\n",
       "      <td>-2.465218</td>\n",
       "      <td>114526</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>302217</th>\n",
       "      <td>Mexico</td>\n",
       "      <td>United States</td>\n",
       "      <td>1</td>\n",
       "      <td>-1.674815</td>\n",
       "      <td>112641</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>540754</th>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>United States</td>\n",
       "      <td>1</td>\n",
       "      <td>-0.477418</td>\n",
       "      <td>111836</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               country1       country2  month  mean_tone  n_articles\n",
       "1199995           China  United States      1  -1.425263      164128\n",
       "1549057          Canada  United States      1  -0.964342      140018\n",
       "1022398          Russia  United States      1  -2.465218      114526\n",
       "302217           Mexico  United States      1  -1.674815      112641\n",
       "540754   United Kingdom  United States      1  -0.477418      111836"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data[data.month == 1].head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 4. Plot data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "list_countries_pair = sorted([\"Mexico\", \"United States\", \"China\", \"France\", \"Russia\", \"Iran\"])\n",
    "n = len(list_countries_pair)\n",
    "\n",
    "RdYlGn10_inv = RdYlGn10[::-1]\n",
    "\n",
    "combinaison_contries = list(itertools.combinations(list_countries_pair, 2))\n",
    "combinaison_contries = list(map(lambda x: (x[0], x[1]) if x[0] < x[1] else (x[1], x[0]), combinaison_contries))\n",
    "\n",
    "df_all_month = data[( data.country1.isin([x[0] for x in combinaison_contries]) ) & data.country2.isin( [x[1] for x in combinaison_contries] )]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>country1</th>\n",
       "      <th>country2</th>\n",
       "      <th>month</th>\n",
       "      <th>mean_tone</th>\n",
       "      <th>n_articles</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>934908</th>\n",
       "      <td>China</td>\n",
       "      <td>United States</td>\n",
       "      <td>5</td>\n",
       "      <td>-1.660653</td>\n",
       "      <td>208115</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>171649</th>\n",
       "      <td>China</td>\n",
       "      <td>United States</td>\n",
       "      <td>8</td>\n",
       "      <td>-2.030696</td>\n",
       "      <td>189021</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1007152</th>\n",
       "      <td>China</td>\n",
       "      <td>United States</td>\n",
       "      <td>6</td>\n",
       "      <td>-1.615881</td>\n",
       "      <td>184604</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1104072</th>\n",
       "      <td>China</td>\n",
       "      <td>United States</td>\n",
       "      <td>10</td>\n",
       "      <td>-1.633340</td>\n",
       "      <td>172943</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1199995</th>\n",
       "      <td>China</td>\n",
       "      <td>United States</td>\n",
       "      <td>1</td>\n",
       "      <td>-1.425263</td>\n",
       "      <td>164128</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1161676</th>\n",
       "      <td>Iran</td>\n",
       "      <td>Mexico</td>\n",
       "      <td>4</td>\n",
       "      <td>-2.225831</td>\n",
       "      <td>2217</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>566816</th>\n",
       "      <td>Iran</td>\n",
       "      <td>Mexico</td>\n",
       "      <td>9</td>\n",
       "      <td>-1.663793</td>\n",
       "      <td>1957</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>823949</th>\n",
       "      <td>Iran</td>\n",
       "      <td>Mexico</td>\n",
       "      <td>12</td>\n",
       "      <td>-2.150265</td>\n",
       "      <td>1908</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>189069</th>\n",
       "      <td>Iran</td>\n",
       "      <td>Mexico</td>\n",
       "      <td>11</td>\n",
       "      <td>-2.395980</td>\n",
       "      <td>1796</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1450887</th>\n",
       "      <td>Iran</td>\n",
       "      <td>Mexico</td>\n",
       "      <td>3</td>\n",
       "      <td>-1.344696</td>\n",
       "      <td>1680</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>180 rows × 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        country1       country2  month  mean_tone  n_articles\n",
       "934908     China  United States      5  -1.660653      208115\n",
       "171649     China  United States      8  -2.030696      189021\n",
       "1007152    China  United States      6  -1.615881      184604\n",
       "1104072    China  United States     10  -1.633340      172943\n",
       "1199995    China  United States      1  -1.425263      164128\n",
       "...          ...            ...    ...        ...         ...\n",
       "1161676     Iran         Mexico      4  -2.225831        2217\n",
       "566816      Iran         Mexico      9  -1.663793        1957\n",
       "823949      Iran         Mexico     12  -2.150265        1908\n",
       "189069      Iran         Mexico     11  -2.395980        1796\n",
       "1450887     Iran         Mexico      3  -1.344696        1680\n",
       "\n",
       "[180 rows x 5 columns]"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_all_month"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "\n",
       "\n",
       "\n",
       "\n",
       "\n",
       "  <div class=\"bk-root\" id=\"a181d82d-d76e-4748-88f5-598ed7c814df\" data-root-id=\"1702\"></div>\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/javascript": [
       "(function(root) {\n",
       "  function embed_document(root) {\n",
       "    \n",
       "  var docs_json = {\"997fedb3-47a8-4302-a31b-6b8179fd0986\":{\"roots\":{\"references\":[{\"attributes\":{\"children\":[{\"id\":\"1701\",\"type\":\"ToolbarBox\"},{\"id\":\"1699\",\"type\":\"GridBox\"}]},\"id\":\"1702\",\"type\":\"Column\"},{\"attributes\":{\"bottom_units\":\"screen\",\"fill_alpha\":{\"value\":0.5},\"fill_color\":{\"value\":\"lightgrey\"},\"left_units\":\"screen\",\"level\":\"overlay\",\"line_alpha\":{\"value\":1.0},\"line_color\":{\"value\":\"black\"},\"line_dash\":[4,4],\"line_width\":{\"value\":2},\"render_mode\":\"css\",\"right_units\":\"screen\",\"top_units\":\"screen\"},\"id\":\"1697\",\"type\":\"BoxAnnotation\"},{\"attributes\":{\"children\":[{\"id\":\"1682\",\"type\":\"Slider\"}]},\"id\":\"1685\",\"type\":\"Column\"},{\"attributes\":{\"fill_color\":{\"field\":\"color_1\"},\"line_color\":{\"field\":\"color_1\"},\"size\":{\"field\":\"size_1\",\"units\":\"screen\"},\"x\":{\"field\":\"country1\"},\"y\":{\"field\":\"country2\"}},\"id\":\"1676\",\"type\":\"Circle\"},{\"attributes\":{\"tools\":[{\"id\":\"1659\",\"type\":\"PanTool\"},{\"id\":\"1660\",\"type\":\"WheelZoomTool\"},{\"id\":\"1661\",\"type\":\"BoxZoomTool\"},{\"id\":\"1662\",\"type\":\"SaveTool\"},{\"id\":\"1663\",\"type\":\"ResetTool\"},{\"id\":\"1664\",\"type\":\"HelpTool\"},{\"id\":\"1665\",\"type\":\"HoverTool\"}]},\"id\":\"1700\",\"type\":\"ProxyToolbar\"},{\"attributes\":{\"ticker\":{\"id\":\"1652\",\"type\":\"CategoricalTicker\"}},\"id\":\"1654\",\"type\":\"Grid\"},{\"attributes\":{},\"id\":\"1694\",\"type\":\"CategoricalTickFormatter\"},{\"attributes\":{\"callback\":null,\"end\":12,\"js_property_callbacks\":{\"change:value\":[{\"id\":\"1681\",\"type\":\"CustomJS\"}]},\"start\":1,\"title\":\"Mois\",\"value\":1},\"id\":\"1682\",\"type\":\"Slider\"},{\"attributes\":{\"callback\":null,\"factors\":[\"China\",\"France\",\"Iran\",\"Mexico\",\"Russia\"]},\"id\":\"1643\",\"type\":\"FactorRange\"},{\"attributes\":{\"children\":[[{\"id\":\"1685\",\"type\":\"Column\"},0,0],[{\"id\":\"1640\",\"subtype\":\"Figure\",\"type\":\"Plot\"},1,0]]},\"id\":\"1699\",\"type\":\"GridBox\"},{\"attributes\":{\"data_source\":{\"id\":\"1674\",\"type\":\"ColumnDataSource\"},\"glyph\":{\"id\":\"1676\",\"type\":\"Circle\"},\"hover_glyph\":null,\"muted_glyph\":null,\"nonselection_glyph\":{\"id\":\"1677\",\"type\":\"Circle\"},\"selection_glyph\":null,\"view\":{\"id\":\"1679\",\"type\":\"CDSView\"}},\"id\":\"1678\",\"type\":\"GlyphRenderer\"},{\"attributes\":{\"source\":{\"id\":\"1674\",\"type\":\"ColumnDataSource\"}},\"id\":\"1679\",\"type\":\"CDSView\"},{\"attributes\":{\"callback\":null,\"tooltips\":[[\"country1 : \",\"@country1\"],[\"country2 : \",\"@country2\"],[\"n articles : \",\"@n_articles_1\"],[\"mean tone : \",\"@mean_tone_1\"]]},\"id\":\"1665\",\"type\":\"HoverTool\"},{\"attributes\":{\"color_mapper\":{\"id\":\"1683\",\"type\":\"LinearColorMapper\"},\"formatter\":{\"id\":\"1690\",\"type\":\"BasicTickFormatter\"},\"location\":[0,0],\"ticker\":{\"id\":\"1689\",\"type\":\"BasicTicker\"},\"width\":8},\"id\":\"1684\",\"type\":\"ColorBar\"},{\"attributes\":{},\"id\":\"1659\",\"type\":\"PanTool\"},{\"attributes\":{\"callback\":null,\"factors\":[\"France\",\"Iran\",\"Mexico\",\"Russia\",\"United States\"]},\"id\":\"1645\",\"type\":\"FactorRange\"},{\"attributes\":{},\"id\":\"1686\",\"type\":\"UnionRenderers\"},{\"attributes\":{},\"id\":\"1660\",\"type\":\"WheelZoomTool\"},{\"attributes\":{\"toolbar\":{\"id\":\"1700\",\"type\":\"ProxyToolbar\"},\"toolbar_location\":\"above\"},\"id\":\"1701\",\"type\":\"ToolbarBox\"},{\"attributes\":{\"overlay\":{\"id\":\"1697\",\"type\":\"BoxAnnotation\"}},\"id\":\"1661\",\"type\":\"BoxZoomTool\"},{\"attributes\":{\"text\":\"Mean tone (color) and number of article (size) for country pairs\"},\"id\":\"1641\",\"type\":\"Title\"},{\"attributes\":{},\"id\":\"1647\",\"type\":\"CategoricalScale\"},{\"attributes\":{\"args\":{\"r\":{\"id\":\"1678\",\"type\":\"GlyphRenderer\"},\"source\":{\"id\":\"1674\",\"type\":\"ColumnDataSource\"},\"tt\":[{\"id\":\"1665\",\"type\":\"HoverTool\"}]},\"code\":\"\\n    var data = source.data;\\n    var i = cb_obj.value\\n    \\n\\n\\n    r.glyph.line_color.field = 'color_' + i\\n    r.glyph.fill_color.field = 'color_' + i\\n    \\n    r.glyph.size.field = 'size_' + i\\n    \\n    //var y_label = label.axis_label;\\n    //y_label.set(\\\"something else\\\");\\n\\n    r.glyph.change.emit()\\n    \\n    \"},\"id\":\"1681\",\"type\":\"CustomJS\"},{\"attributes\":{\"fill_alpha\":{\"value\":0.1},\"fill_color\":{\"value\":\"#1f77b4\"},\"line_alpha\":{\"value\":0.1},\"line_color\":{\"value\":\"#1f77b4\"},\"size\":{\"field\":\"size_1\",\"units\":\"screen\"},\"x\":{\"field\":\"country1\"},\"y\":{\"field\":\"country2\"}},\"id\":\"1677\",\"type\":\"Circle\"},{\"attributes\":{},\"id\":\"1687\",\"type\":\"Selection\"},{\"attributes\":{},\"id\":\"1662\",\"type\":\"SaveTool\"},{\"attributes\":{},\"id\":\"1663\",\"type\":\"ResetTool\"},{\"attributes\":{},\"id\":\"1649\",\"type\":\"CategoricalScale\"},{\"attributes\":{},\"id\":\"1689\",\"type\":\"BasicTicker\"},{\"attributes\":{\"high\":0.513613836733707,\"low\":-3.3853649377822874,\"palette\":[\"#a50026\",\"#d73027\",\"#f46d43\",\"#fdae61\",\"#fee08b\",\"#d9ef8b\",\"#a6d96a\",\"#66bd63\",\"#1a9850\",\"#006837\"]},\"id\":\"1683\",\"type\":\"LinearColorMapper\"},{\"attributes\":{},\"id\":\"1664\",\"type\":\"HelpTool\"},{\"attributes\":{\"below\":[{\"id\":\"1651\",\"type\":\"CategoricalAxis\"}],\"center\":[{\"id\":\"1654\",\"type\":\"Grid\"},{\"id\":\"1658\",\"type\":\"Grid\"}],\"left\":[{\"id\":\"1655\",\"type\":\"CategoricalAxis\"}],\"plot_height\":650,\"plot_width\":1000,\"renderers\":[{\"id\":\"1678\",\"type\":\"GlyphRenderer\"}],\"right\":[{\"id\":\"1684\",\"type\":\"ColorBar\"}],\"title\":{\"id\":\"1641\",\"type\":\"Title\"},\"toolbar\":{\"id\":\"1666\",\"type\":\"Toolbar\"},\"toolbar_location\":null,\"x_range\":{\"id\":\"1643\",\"type\":\"FactorRange\"},\"x_scale\":{\"id\":\"1647\",\"type\":\"CategoricalScale\"},\"y_range\":{\"id\":\"1645\",\"type\":\"FactorRange\"},\"y_scale\":{\"id\":\"1649\",\"type\":\"CategoricalScale\"}},\"id\":\"1640\",\"subtype\":\"Figure\",\"type\":\"Plot\"},{\"attributes\":{},\"id\":\"1652\",\"type\":\"CategoricalTicker\"},{\"attributes\":{\"axis_label\":\"Country\",\"formatter\":{\"id\":\"1692\",\"type\":\"CategoricalTickFormatter\"},\"ticker\":{\"id\":\"1656\",\"type\":\"CategoricalTicker\"}},\"id\":\"1655\",\"type\":\"CategoricalAxis\"},{\"attributes\":{\"axis_label\":\"Country\",\"formatter\":{\"id\":\"1694\",\"type\":\"CategoricalTickFormatter\"},\"ticker\":{\"id\":\"1652\",\"type\":\"CategoricalTicker\"}},\"id\":\"1651\",\"type\":\"CategoricalAxis\"},{\"attributes\":{},\"id\":\"1690\",\"type\":\"BasicTickFormatter\"},{\"attributes\":{\"active_drag\":\"auto\",\"active_inspect\":\"auto\",\"active_multi\":null,\"active_scroll\":\"auto\",\"active_tap\":\"auto\",\"tools\":[{\"id\":\"1659\",\"type\":\"PanTool\"},{\"id\":\"1660\",\"type\":\"WheelZoomTool\"},{\"id\":\"1661\",\"type\":\"BoxZoomTool\"},{\"id\":\"1662\",\"type\":\"SaveTool\"},{\"id\":\"1663\",\"type\":\"ResetTool\"},{\"id\":\"1664\",\"type\":\"HelpTool\"},{\"id\":\"1665\",\"type\":\"HoverTool\"}]},\"id\":\"1666\",\"type\":\"Toolbar\"},{\"attributes\":{\"callback\":null,\"data\":{\"color_1\":[\"#a6d96a\",\"#a50026\",\"#d9ef8b\",\"#fee08b\",\"#fee08b\",\"#d9ef8b\",\"#d73027\",\"#a6d96a\",\"#66bd63\",\"#d9ef8b\",\"#d9ef8b\",\"#d9ef8b\",\"#f46d43\",\"#d73027\",\"#a50026\",\"#d9ef8b\",\"#d9ef8b\",\"#d9ef8b\",\"#d9ef8b\",\"#fdae61\",\"#d9ef8b\",\"#d9ef8b\",\"#d9ef8b\",\"#d9ef8b\",\"#f46d43\"],\"color_10\":[\"#a6d96a\",\"#d73027\",\"#66bd63\",\"#fee08b\",\"#fee08b\",\"#d9ef8b\",\"#d73027\",\"#006837\",\"#fee08b\",\"#a6d96a\",\"#d9ef8b\",\"#d9ef8b\",\"#fee08b\",\"#d73027\",\"#a50026\",\"#d9ef8b\",\"#d9ef8b\",\"#d9ef8b\",\"#66bd63\",\"#d9ef8b\",\"#d9ef8b\",\"#d9ef8b\",\"#d9ef8b\",\"#d9ef8b\",\"#f46d43\"],\"color_11\":[\"#66bd63\",\"#f46d43\",\"#66bd63\",\"#d9ef8b\",\"#fee08b\",\"#d9ef8b\",\"#f46d43\",\"#1a9850\",\"#d9ef8b\",\"#a6d96a\",\"#d9ef8b\",\"#d9ef8b\",\"#f46d43\",\"#d73027\",\"#a50026\",\"#d9ef8b\",\"#d9ef8b\",\"#d9ef8b\",\"#66bd63\",\"#fee08b\",\"#d9ef8b\",\"#d9ef8b\",\"#d9ef8b\",\"#d9ef8b\",\"#fdae61\"],\"color_12\":[\"#d9ef8b\",\"#d73027\",\"#a6d96a\",\"#fee08b\",\"#fee08b\",\"#d9ef8b\",\"#d73027\",\"#1a9850\",\"#fee08b\",\"#d9ef8b\",\"#d9ef8b\",\"#d9ef8b\",\"#f46d43\",\"#d73027\",\"#a50026\",\"#d9ef8b\",\"#d9ef8b\",\"#d9ef8b\",\"#a6d96a\",\"#d9ef8b\",\"#d9ef8b\",\"#d9ef8b\",\"#d9ef8b\",\"#d9ef8b\",\"#d73027\"],\"color_2\":[\"#a6d96a\",\"#f46d43\",\"#a6d96a\",\"#fdae61\",\"#d9ef8b\",\"#d9ef8b\",\"#f46d43\",\"#1a9850\",\"#d9ef8b\",\"#a6d96a\",\"#d9ef8b\",\"#d9ef8b\",\"#f46d43\",\"#f46d43\",\"#d73027\",\"#d9ef8b\",\"#d9ef8b\",\"#d9ef8b\",\"#a6d96a\",\"#fee08b\",\"#d9ef8b\",\"#d9ef8b\",\"#d9ef8b\",\"#d9ef8b\",\"#f46d43\"],\"color_3\":[\"#a6d96a\",\"#a50026\",\"#66bd63\",\"#fee08b\",\"#fee08b\",\"#d9ef8b\",\"#f46d43\",\"#1a9850\",\"#a6d96a\",\"#d9ef8b\",\"#d9ef8b\",\"#d9ef8b\",\"#fee08b\",\"#d73027\",\"#a50026\",\"#d9ef8b\",\"#d9ef8b\",\"#d9ef8b\",\"#66bd63\",\"#fee08b\",\"#d9ef8b\",\"#d9ef8b\",\"#d9ef8b\",\"#d9ef8b\",\"#f46d43\"],\"color_4\":[\"#a6d96a\",\"#d73027\",\"#66bd63\",\"#fee08b\",\"#d9ef8b\",\"#d9ef8b\",\"#f46d43\",\"#1a9850\",\"#d9ef8b\",\"#d9ef8b\",\"#d9ef8b\",\"#d9ef8b\",\"#f46d43\",\"#d73027\",\"#d73027\",\"#d9ef8b\",\"#d9ef8b\",\"#d9ef8b\",\"#a6d96a\",\"#fdae61\",\"#d9ef8b\",\"#d9ef8b\",\"#d9ef8b\",\"#d9ef8b\",\"#f46d43\"],\"color_5\":[\"#d9ef8b\",\"#a50026\",\"#a6d96a\",\"#fdae61\",\"#fdae61\",\"#d9ef8b\",\"#d73027\",\"#1a9850\",\"#a6d96a\",\"#a6d96a\",\"#d9ef8b\",\"#d9ef8b\",\"#f46d43\",\"#a50026\",\"#a50026\",\"#d9ef8b\",\"#d9ef8b\",\"#d9ef8b\",\"#a6d96a\",\"#fee08b\",\"#d9ef8b\",\"#d9ef8b\",\"#d9ef8b\",\"#d9ef8b\",\"#f46d43\"],\"color_6\":[\"#d9ef8b\",\"#d73027\",\"#d9ef8b\",\"#fee08b\",\"#fee08b\",\"#d9ef8b\",\"#d73027\",\"#66bd63\",\"#d9ef8b\",\"#a6d96a\",\"#d9ef8b\",\"#d9ef8b\",\"#d73027\",\"#d73027\",\"#a50026\",\"#d9ef8b\",\"#d9ef8b\",\"#d9ef8b\",\"#a6d96a\",\"#fdae61\",\"#d9ef8b\",\"#d9ef8b\",\"#d9ef8b\",\"#d9ef8b\",\"#fdae61\"],\"color_7\":[\"#d9ef8b\",\"#d73027\",\"#66bd63\",\"#fee08b\",\"#fee08b\",\"#d9ef8b\",\"#d73027\",\"#1a9850\",\"#d9ef8b\",\"#d9ef8b\",\"#d9ef8b\",\"#d9ef8b\",\"#fee08b\",\"#d73027\",\"#d73027\",\"#d9ef8b\",\"#d9ef8b\",\"#d9ef8b\",\"#66bd63\",\"#fdae61\",\"#d9ef8b\",\"#d9ef8b\",\"#d9ef8b\",\"#d9ef8b\",\"#fdae61\"],\"color_8\":[\"#d9ef8b\",\"#f46d43\",\"#d9ef8b\",\"#fee08b\",\"#fdae61\",\"#d9ef8b\",\"#f46d43\",\"#66bd63\",\"#d9ef8b\",\"#fee08b\",\"#d9ef8b\",\"#d9ef8b\",\"#fdae61\",\"#f46d43\",\"#d73027\",\"#d9ef8b\",\"#d9ef8b\",\"#d9ef8b\",\"#a6d96a\",\"#f46d43\",\"#d9ef8b\",\"#d9ef8b\",\"#d9ef8b\",\"#d9ef8b\",\"#fdae61\"],\"color_9\":[\"#d9ef8b\",\"#d73027\",\"#a6d96a\",\"#fee08b\",\"#fdae61\",\"#d9ef8b\",\"#d73027\",\"#1a9850\",\"#fee08b\",\"#d9ef8b\",\"#d9ef8b\",\"#d9ef8b\",\"#fdae61\",\"#d73027\",\"#a50026\",\"#d9ef8b\",\"#d9ef8b\",\"#d9ef8b\",\"#a6d96a\",\"#fee08b\",\"#d9ef8b\",\"#d9ef8b\",\"#d9ef8b\",\"#d9ef8b\",\"#f46d43\"],\"country1\":[\"China\",\"China\",\"China\",\"China\",\"China\",\"France\",\"France\",\"France\",\"France\",\"France\",\"Iran\",\"Iran\",\"Iran\",\"Iran\",\"Iran\",\"Mexico\",\"Mexico\",\"Mexico\",\"Mexico\",\"Mexico\",\"Russia\",\"Russia\",\"Russia\",\"Russia\",\"Russia\"],\"country2\":[\"France\",\"Iran\",\"Mexico\",\"Russia\",\"United States\",\"France\",\"Iran\",\"Mexico\",\"Russia\",\"United States\",\"France\",\"Iran\",\"Mexico\",\"Russia\",\"United States\",\"France\",\"Iran\",\"Mexico\",\"Russia\",\"United States\",\"France\",\"Iran\",\"Mexico\",\"Russia\",\"United States\"],\"index\":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24],\"mean_tone_1\":{\"__ndarray__\":\"+N573zw+6L8RQghxuisKwFNKKUXMD+q/jDHGuC5t+L+VUkoJ4c32vwAAAAAAAAAASiml9FD1BcAyxhjnxsfcv4QQQmCZe6m/SimlTIme678AAAAAAAAAAAAAAAAAAAAAGWOMeYH4AcAhhBDiG10EwAAAAEA+JgnAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA33vv/Y618r/nnHOeCsz6vwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAApZRSasS4A8A=\",\"dtype\":\"float64\",\"shape\":[25]},\"mean_tone_10\":{\"__ndarray__\":\"33vvWkOb57+MMcboNQkFwFNKKdzsbcW/GWOMbY+J9r8AAABAKSL6vwAAAAAAAAAA33vvLYtZB8Bba/FIhm/gP3zvvUeu3/a/a621TPIQ6L8AAAAAAAAAAAAAAAAAAAAAGWOMgdOH+b/fe+/dTvwGwL733nsHWgnAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAzjnnbOgIur/43nsRJbfyvwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAW2utZc+XA8A=\",\"dtype\":\"float64\",\"shape\":[25]},\"mean_tone_11\":{\"__ndarray__\":\"zczMnt+o0r+amZn5p/ABwM3MzD0YN8m/7+7uAojt8L9VVVWtxEn0vwAAAAAAAAAAvLu7Qy8FBMDv7u6uiX3EP+/uLiEtCe2/ERERX60C4b8AAAAAAAAAAAAAAAAAAAAAzczMdPcqA8De3d2N/jcEwGZmZjY6FQvAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA3t3dXbUb0r+amZkBkrH4vwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMzMza3JbAMA=\",\"dtype\":\"float64\",\"shape\":[25]},\"mean_tone_12\":{\"__ndarray__\":\"lVLKFFP57L90zjnHyMkEwCmllBJrrta/dM45b4uE979KKaVUJNbzvwAAAAAAAAAAQgghxGr/BcC+995X2wbGPwghhIzM0vi/33vv2bvo6b8AAAAAAAAAAAAAAAAAAAAApZRSKr4zAcBba63lx9YFwDLGGIPLsArAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAvvfek0rO579rrbVMLOrwvwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAASimlNHQ+BMA=\",\"dtype\":\"float64\",\"shape\":[25]},\"mean_tone_2\":{\"__ndarray__\":\"JUmS8VFb4r8lSZIEGAYDwNu2bT/76dm/JUmS/DLF+r8lSZKsw8nxvwAAAAAAAAAAbtu245nbAsAAAEBrp1bSPwAAAMoXBOu/27Zt8WkE4r8AAAAAAAAAAAAAAAAAAAAASZKkD8XTAMAAAADIXqUCwEmSJAHtDQXAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAASZK08qSu5r/btm0ai7X3vwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAkiRJstHGAsA=\",\"dtype\":\"float64\",\"shape\":[25]},\"mean_tone_3\":{\"__ndarray__\":\"33vvC3kf5r/fe+894QcJwL733nuc8GC/a6211szR9r/XWms9+iL1vwAAAAAAAAAAEUIIEV62A8Cdcw6SVgfgPymlpFDU+Oi/W2sty+G5678AAAAAAAAAAAAAAAAAAAAApZTSet+D9b9TSil1S0sFwLbWWmvErAjAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAjDHGSP+ex78IIYSA5iP6vwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIYQQImzQAcA=\",\"dtype\":\"float64\",\"shape\":[25]},\"mean_tone_4\":{\"__ndarray__\":\"d3d3tnwb47+8u7tDc4sFwImIiOj6ary/IiIi+ky/878zMzNTRlryvwAAAAAAAAAA3t3d/HT7A8DNzMDm6/TYP4mIqFu3zfC/zczMjCw9778AAAAAAAAAAAAAAAAAAAAA7+7udIDOAcB3d3eXEOsGwLy7uwOhlAfAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA7+7udkzy37+rqqrSyTH8vwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA7+7uHqmvAMA=\",\"dtype\":\"float64\",\"shape\":[25]},\"mean_tone_5\":{\"__ndarray__\":\"W2stL+MN7L/vvfe+0UYIwJ1zTnkHr+S/CCGE0IYR+7+21lo7CZL6vwAAAAAAAAAAnXPO+eb4BMC+997FlAPgP3zvPQuJ7OW/11prOSmM5L8AAAAAAAAAAAAAAAAAAAAA+N57qzF7AcAppZQigPoHwJ1zzlk8VQrAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA55xzQtTg1r9ba63Vykf0vwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAttZaCwWyAcA=\",\"dtype\":\"float64\",\"shape\":[25]},\"mean_tone_6\":{\"__ndarray__\":\"IiIidru+6b8iIiKa/54FwHd3d7q27vK/d3d3b/XG+L/v7u6Optr5vwAAAAAAAAAAq6qqmoITBcBVVVUBaIy7v+/u7uyyu/G/ZmZm9ooO478AAAAAAAAAAAAAAAAAAAAAvLu7X3B+BMBmZmbuOVUHwGZmZi7ongjAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAq6qqMsEt5r9mZmb2WyYAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAREREXGOFAMA=\",\"dtype\":\"float64\",\"shape\":[25]},\"mean_tone_7\":{\"__ndarray__\":\"fO+9b4e76b8AAAAgNnEFwOecc0ZgAa0/MsYYS7Kx878yxhgTw6/zvwAAAAAAAAAAhBBCKO9DBcAyxhh96KLTPymllIj+bu+/QgghDHYH7L8AAAAAAAAAAAAAAAAAAAAAjDHGGrTh+b/XWmute1MEwAghhGBGKQfAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKaWUwlHYrj8RQgghVGv9vwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA11prvdE//L8=\",\"dtype\":\"float64\",\"shape\":[25]},\"mean_tone_8\":{\"__ndarray__\":\"55xztx2p8b9TSil12F0DwFtrrWHIO+2/nXPOiYhB+r9TSil13T4AwAAAAAAAAAAAnXPO2cabAcCEEMJVVfnGv6211s6iDu2/KaWUPuLH878AAAAAAAAAAAAAAAAAAAAA7733/ggn+7+MMcb4PdIDwHTOOacZrQbAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdM45w+TT378RQgjRQD4BwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAttZa2xYXAMA=\",\"dtype\":\"float64\",\"shape\":[25]},\"mean_tone_9\":{\"__ndarray__\":\"IiIiynjf7r+amZlxDRgGwM3MzA71zN6/3t3dfZSZ+L9mZmaWVh/7vwAAAAAAAAAAIiIiohsMB8AAAAAYVWDTP0RERFh1dfW/ERERr6WQ7b8AAAAAAAAAAAAAAAAAAAAAd3d3v+We+r9ERESUydUFwLy7uysODQrAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAREREVgg94b8RERENYsr3vwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMzMzG1AxAcA=\",\"dtype\":\"float64\",\"shape\":[25]},\"n_articles_1\":[37498,28750,20144,43734,164128,0,8746,11424,24977,69010,0,0,3687,22653,51724,0,0,0,12840,112641,0,0,0,0,114526],\"n_articles_10\":[33434,14160,16545,37281,172943,0,8997,10879,24523,75920,0,0,2482,27690,46004,0,0,0,7975,60639,0,0,0,0,125624],\"n_articles_11\":[34484,11385,16018,32295,135221,0,8109,12139,22972,67496,0,0,1796,12934,31208,0,0,0,8831,63194,0,0,0,0,97849],\"n_articles_12\":[36375,12110,16878,38978,133335,0,7272,12167,27139,73722,0,0,1908,13443,34542,0,0,0,8884,55093,0,0,0,0,99978],\"n_articles_2\":[34230,18068,21242,50801,149791,0,12105,13544,25443,73132,0,0,2977,21991,41143,0,0,0,12686,93078,0,0,0,0,117766],\"n_articles_3\":[44852,17626,22138,44786,152641,0,7776,15352,26457,86060,0,0,1680,16513,37948,0,0,0,13602,81183,0,0,0,0,136520],\"n_articles_4\":[36658,20195,21293,47981,143187,0,8466,16165,29772,89997,0,0,2217,17448,44219,0,0,0,14148,82907,0,0,0,0,129298],\"n_articles_5\":[48322,33845,29682,53140,208115,0,14552,16608,33383,97322,0,0,3133,26614,85683,0,0,0,13150,78218,0,0,0,0,127807],\"n_articles_6\":[49273,38524,44608,57971,184604,0,20727,21077,33295,112197,0,0,7445,33854,105164,0,0,0,16644,113470,0,0,0,0,101175],\"n_articles_7\":[46012,27718,22840,47866,158602,0,22138,18595,29380,98075,0,0,4564,25514,73910,0,0,0,12263,85883,0,0,0,0,96921],\"n_articles_8\":[48609,21987,21561,43209,189021,0,18235,14701,26979,94972,0,0,2315,19551,47945,0,0,0,9871,85221,0,0,0,0,78694],\"n_articles_9\":[36763,26034,17129,37407,155840,0,17946,11364,23417,90429,0,0,1957,21373,75554,0,0,0,9279,67037,0,0,0,0,81493],\"size_1\":[18,13,9,21,79,0,4,5,12,33,0,0,1,10,25,0,0,0,6,54,0,0,0,0,55],\"size_10\":[16,6,8,18,83,0,4,5,11,36,0,0,1,13,22,0,0,0,3,29,0,0,0,0,60],\"size_11\":[16,5,7,15,65,0,3,5,11,32,0,0,0,6,15,0,0,0,4,30,0,0,0,0,47],\"size_12\":[17,5,8,18,64,0,3,5,13,35,0,0,0,6,16,0,0,0,4,26,0,0,0,0,48],\"size_2\":[16,8,10,24,72,0,5,6,12,35,0,0,1,10,19,0,0,0,6,45,0,0,0,0,57],\"size_3\":[21,8,10,21,73,0,3,7,12,41,0,0,0,7,18,0,0,0,6,39,0,0,0,0,66],\"size_4\":[17,9,10,23,69,0,4,7,14,43,0,0,1,8,21,0,0,0,6,40,0,0,0,0,62],\"size_5\":[23,16,14,25,100,0,7,8,16,47,0,0,1,12,41,0,0,0,6,37,0,0,0,0,61],\"size_6\":[23,18,21,28,89,0,10,10,16,54,0,0,3,16,50,0,0,0,8,54,0,0,0,0,49],\"size_7\":[22,13,11,23,76,0,10,9,14,47,0,0,2,12,35,0,0,0,5,41,0,0,0,0,46],\"size_8\":[23,10,10,20,91,0,8,7,13,46,0,0,1,9,23,0,0,0,4,41,0,0,0,0,38],\"size_9\":[17,12,8,18,75,0,8,5,11,43,0,0,0,10,36,0,0,0,4,32,0,0,0,0,39]},\"selected\":{\"id\":\"1687\",\"type\":\"Selection\"},\"selection_policy\":{\"id\":\"1686\",\"type\":\"UnionRenderers\"}},\"id\":\"1674\",\"type\":\"ColumnDataSource\"},{\"attributes\":{},\"id\":\"1692\",\"type\":\"CategoricalTickFormatter\"},{\"attributes\":{\"dimension\":1,\"ticker\":{\"id\":\"1656\",\"type\":\"CategoricalTicker\"}},\"id\":\"1658\",\"type\":\"Grid\"},{\"attributes\":{},\"id\":\"1656\",\"type\":\"CategoricalTicker\"}],\"root_ids\":[\"1702\"]},\"title\":\"Bokeh Application\",\"version\":\"1.4.0\"}};\n",
       "  var render_items = [{\"docid\":\"997fedb3-47a8-4302-a31b-6b8179fd0986\",\"roots\":{\"1702\":\"a181d82d-d76e-4748-88f5-598ed7c814df\"}}];\n",
       "  root.Bokeh.embed.embed_items_notebook(docs_json, render_items);\n",
       "\n",
       "  }\n",
       "  if (root.Bokeh !== undefined) {\n",
       "    embed_document(root);\n",
       "  } else {\n",
       "    var attempts = 0;\n",
       "    var timer = setInterval(function(root) {\n",
       "      if (root.Bokeh !== undefined) {\n",
       "        clearInterval(timer);\n",
       "        embed_document(root);\n",
       "      } else {\n",
       "        attempts++;\n",
       "        if (attempts > 100) {\n",
       "          clearInterval(timer);\n",
       "          console.log(\"Bokeh: ERROR: Unable to run BokehJS code because BokehJS library is missing\");\n",
       "        }\n",
       "      }\n",
       "    }, 10, root)\n",
       "  }\n",
       "})(window);"
      ],
      "application/vnd.bokehjs_exec.v0+json": ""
     },
     "metadata": {
      "application/vnd.bokehjs_exec.v0+json": {
       "id": "1702"
      }
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "list_countries_pair = sorted([\"Mexico\", \"United States\", \"China\", \"France\", \"Russia\", \"Iran\"])\n",
    "n = len(list_countries_pair)\n",
    "list_month = [\"Janvier\", \"Fevrier\", \"Mars\", \"Avril\", \"Mai\", \"Juin\"]\n",
    "\n",
    "RdYlGn10_inv = RdYlGn10[::-1]\n",
    "\n",
    "combinaison_contries = list(itertools.combinations(list_countries_pair, 2))\n",
    "combinaison_contries = list(map(lambda x: (x[0], x[1]) if x[0] < x[1] else (x[1], x[0]), combinaison_contries))\n",
    "\n",
    "df_all_month = data[( data.country1.isin([x[0] for x in combinaison_contries]) ) & data.country2.isin( [x[1] for x in combinaison_contries] )]\n",
    "\n",
    "TOOLTIPS = [(\"country1 : \", \"@country1\"),\n",
    "            (\"country2 : \", \"@country2\"),\n",
    "            (\"n articles : \", \"@n_articles_1\"),\n",
    "            (\"mean tone : \", \"@mean_tone_1\")]\n",
    "\n",
    "\n",
    "output_file(\"mean tone and articles.html\", title=\"mean tone and articles\")\n",
    "\n",
    "p = figure(x_range = list_countries_pair[:-1], y_range = list_countries_pair[1:], plot_width=1000, plot_height=650, tooltips=TOOLTIPS,\n",
    "             title=\"Mean tone (color) and number of article (size) for country pairs\",\n",
    "             x_axis_label=\"Country\",\n",
    "             y_axis_label=\"Country\"\n",
    "          )\n",
    "\n",
    "min_tone, max_tone = df_all_month.mean_tone.min(), df_all_month.mean_tone.max()\n",
    "delta_tone = max_tone - min_tone\n",
    "\n",
    "min_article, max_article = df_all_month.n_articles.min(), df_all_month.n_articles.max()\n",
    "delta_article = max_article - min_article\n",
    "\n",
    "x = [list_countries_pair[j] for j in range(n-1) for i in range(n-1)]\n",
    "y = list_countries_pair[1:]*(n-1)\n",
    "\n",
    "df_tones = pd.DataFrame({\"country1\" : x, \"country2\" : y})\n",
    "\n",
    "for month in df_all_month.month.unique():\n",
    "    df_current = df_all_month.loc[data.month == month]\n",
    "    mean_tone_values = []\n",
    "    n_articles_values = []\n",
    "    colors = []\n",
    "    sizes = []\n",
    "    for country1 in list_countries_pair[:-1]:\n",
    "        for country2 in list_countries_pair[1:]:\n",
    "            try:\n",
    "                mean_tone = df_current[ (df_current.country1 == country1) & (df_current.country2 == country2)].mean_tone.values[0]\n",
    "                mean_tone_values.append(mean_tone)\n",
    "                \n",
    "                n_articles = df_current[ (df_current.country1 == country1) & (df_current.country2 == country2)].n_articles.values[0]\n",
    "                n_articles_values.append(n_articles)\n",
    "                \n",
    "                colors.append (RdYlGn10_inv[int((mean_tone - min_tone)/delta_tone*9)])\n",
    "                sizes.append (int((n_articles)/delta_article*100))\n",
    "                \n",
    "            except:\n",
    "                mean_tone_values.append(0)\n",
    "                n_articles_values.append(0)\n",
    "                colors.append(RdYlGn10_inv[5])\n",
    "                sizes.append(0)\n",
    "    \n",
    "    df_tones[f\"color_{month}\"] = colors\n",
    "    df_tones[f\"size_{month}\"] = sizes\n",
    "    df_tones[f\"mean_tone_{month}\"] = mean_tone_values\n",
    "    df_tones[f\"n_articles_{month}\"] = n_articles_values\n",
    "    \n",
    "\n",
    "source = ColumnDataSource(data = df_tones)\n",
    "r = p.circle(x=\"country1\", y=\"country2\", color=\"color_1\", size=\"size_1\", source=source)   \n",
    "        \n",
    "callback = CustomJS(args=dict(r=r, source=source, tt=p.hover), code=\n",
    "    \"\"\"\n",
    "    var data = source.data;\n",
    "    var i = cb_obj.value\n",
    "    \n",
    "\n",
    "\n",
    "    r.glyph.line_color.field = 'color_' + i\n",
    "    r.glyph.fill_color.field = 'color_' + i\n",
    "    \n",
    "    r.glyph.size.field = 'size_' + i\n",
    "    \n",
    "    //var y_label = label.axis_label;\n",
    "    //y_label.set(\"something else\");\n",
    "\n",
    "    r.glyph.change.emit()\n",
    "    \n",
    "    \"\"\")\n",
    "\n",
    "\n",
    "        \n",
    "slider = Slider(start=1, end=12, value=1, step=1, title='Mois')   \n",
    "slider.js_on_change('value', callback)\n",
    "\n",
    "mapper = linear_cmap(field_name='mean_tone', palette=RdYlGn10_inv ,low=min(df_all_month.mean_tone) ,high=max(df_all_month.mean_tone))\n",
    "color_bar = ColorBar(color_mapper=mapper['transform'], width=8,  location=(0,0))\n",
    "\n",
    "p.add_layout(color_bar, 'right')\n",
    "\n",
    "l = gridplot([[column(slider)],[p]])\n",
    "\n",
    "show(l)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [],
   "source": [
    "with open('mean_tone_and_articles_2019.pickle', 'wb') as handle:\n",
    "    pickle.dump(data, handle, protocol=pickle.HIGHEST_PROTOCOL)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
